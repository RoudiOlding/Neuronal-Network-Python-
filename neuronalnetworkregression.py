# -*- coding: utf-8 -*-
"""neuronalNetworkRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vQ-gbu3P-93z9UQtXYpKB7Fdvwu2XTqm

1. Cargando liberías
"""

from google.colab import files

# General data analysis/plotting
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Data preprocessing
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

# Neural Net modules
from tensorflow.keras import Sequential
from keras.layers import Dense, Dropout
from keras.callbacks import EarlyStopping

"""2. Preparando la data"""

uploaded = files.upload()

df = pd.read_csv("Datasetv2.csv", delim_whitespace=False, header=None)

nombres_caracteristicas = ['RAZABS', 'MABS', 'DABS', 'TEMP', 'CSTRANS', 'DISTRA', 'TMSERV',
                'ED', 'HOLAB', 'METEST', 'EDU', 'HIJ', 'PES', 'ALT', 'MAS', 'ABSTI']

df.columns = nombres_caracteristicas
print(df.head())

"""3. Creando el modelo"""

X = df.drop('ABSTI', axis=1)
y = df['ABSTI']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 20)

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
scaler.fit(X_train)

X_train_scaled = scaler.transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = Sequential()
model.add(Dense(128, input_dim=15, activation='relu'))
model.add(Dense(64, activation='relu'))
model.add(Dense(1, activation='linear'))

model.compile(loss='mean_squared_error', optimizer='rmsprop', metrics=['mae'])
model.summary()

"""4. Entrenando al modelo"""

history = History()
model.fit(X_train_scaled, y_train, validation_split=0.2, epochs=100, callbacks=[history])

from matplotlib import pyplot as plt
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(1, len(loss) + 1)
plt.plot(epochs, loss, 'y', label='Pérdida de entrenamiento')
plt.plot(epochs, val_loss, 'r', label='Pérdida de validación')
plt.title('Pérdida de entrenamiento y validación')
plt.xlabel('Épocas')
plt.ylabel('Pérdida')
plt.legend()
plt.show()

# Plotear la MAE de entrenamiento y validación en cada época
mae = history.history['mae']
val_mae = history.history['val_mae']
plt.plot(epochs, mae, 'y', label='MAE de entrenamiento')
plt.plot(epochs, val_mae, 'r', label='MAE de validación')
plt.title('MAE de entrenamiento y validación')
plt.xlabel('Épocas')
plt.ylabel('MAE')
plt.legend()
plt.show()

"""5. Prediciendo valores"""

predictions = model.predict(X_test_scaled[:5])
print("Predicted values are: ", predictions.flatten())
print("Real values are: ", y_test[:5].values)

"""6. Comparaciones con otros modelos"""

#Comparison with other models..
#Neural network - from the current code
mse_neural, mae_neural = model.evaluate(X_test_scaled, y_test)
print('Mean squared error from neural net: ', mse_neural)
print('Mean absolute error from neural net: ', mae_neural)